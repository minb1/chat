# Generated by Django 5.1.6 on 2025-04-28 13:49

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('logius', '0001_initial'),
    ]

    operations = [
        migrations.RemoveIndex(
            model_name='chatquery',
            name='idx_chatquery_chat_id',
        ),
        migrations.RemoveIndex(
            model_name='chatquery',
            name='idx_chatquery_doc_tag',
        ),
        migrations.RemoveIndex(
            model_name='chatquery',
            name='idx_chatquery_created_at',
        ),
        migrations.RemoveField(
            model_name='chatquery',
            name='file_paths',
        ),
        migrations.AddField(
            model_name='chatquery',
            name='final_doc_ids',
            field=models.JSONField(default=list, help_text='List of Qdrant point IDs (or unique file_paths as fallback) of the final documents used for context in this turn, potentially becoming sticky memory for the next.'),
        ),
        migrations.AddField(
            model_name='chatquery',
            name='rewritten_query',
            field=models.TextField(blank=True, help_text='Standalone query generated by CQR (Contextual Query Rewriting)', null=True),
        ),
        migrations.AddField(
            model_name='chatquery',
            name='rewritten_query_embedding',
            field=models.JSONField(blank=True, help_text='Embedding vector of the rewritten query (stored as list)', null=True),
        ),
        migrations.AlterField(
            model_name='chatquery',
            name='chat_id',
            field=models.CharField(db_index=True, help_text='Session ID for grouping queries belonging to the same conversation', max_length=36),
        ),
        migrations.AlterField(
            model_name='chatquery',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='chatquery',
            name='doc_tag',
            field=models.JSONField(blank=True, default=list, help_text='List of document tags associated with the final context documents used for this response'),
        ),
        migrations.AlterField(
            model_name='chatquery',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this query turn', primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='chatquery',
            name='llm_response',
            field=models.TextField(blank=True, help_text='Response generated by the LLM', null=True),
        ),
        migrations.AlterField(
            model_name='chatquery',
            name='model_used',
            field=models.CharField(blank=True, help_text='Identifier of the LLM model used for generation', max_length=100),
        ),
        migrations.AlterField(
            model_name='chatquery',
            name='user_query',
            field=models.TextField(help_text='Original user query text'),
        ),
        migrations.AlterField(
            model_name='document',
            name='content',
            field=models.TextField(help_text='The actual text content of the chunk'),
        ),
        migrations.AlterField(
            model_name='document',
            name='doc_tag',
            field=models.TextField(blank=True, help_text='Optional tag or category for the document', null=True),
        ),
        migrations.AlterField(
            model_name='document',
            name='file_path',
            field=models.TextField(db_index=True, help_text='Unique identifier path for the document chunk', unique=True),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='feedback_text',
            field=models.TextField(blank=True, help_text='Optional free-text comments from the user', null=True),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='feedback_type',
            field=models.CharField(choices=[('helpful', 'Helpful'), ('unhelpful', 'Unhelpful'), ('false', 'False/Incorrect')], help_text='The type of feedback provided', max_length=20),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='query',
            field=models.ForeignKey(help_text='The specific query this feedback refers to', on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='logius.chatquery'),
        ),
        migrations.AddIndex(
            model_name='chatquery',
            index=models.Index(fields=['chat_id', '-created_at'], name='chatquery_chat_id_created_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['file_path'], name='idx_documents_file_path'),
        ),
    ]
