# prompt/prompt_builder.py
import datetime
from typing import Optional

# --- Contextual Query Rewriting (CQR) Prompt ---

def create_cqr_prompt(user_query: str, chat_history: str) -> str:
    """
    Creates a prompt for an LLM to rewrite the latest user query into a standalone query,
    using the provided chat history for context resolution and denoising.

    Args:
        user_query: The latest message/question from the user.
        chat_history: A string representing the conversation history
                      (e.g., formatted Q&A pairs).

    Returns:
        A string containing the formatted prompt for the CQR task.
    """
    # Basic history formatting check
    history_section = chat_history.strip() if chat_history and chat_history.strip() else "Dit is het begin van het gesprek. Er is geen eerdere geschiedenis."

    prompt = f"""
CONTEXT: Je bent een AI-assistent die de laatste gebruikersvraag moet herschrijven op basis van een chatgeschiedenis. Het doel is om een **volledig op zichzelf staande zoekopdracht** te genereren die gebruikt kan worden om relevante informatie te vinden in een technische kennisbank, zonder afhankelijk te zijn van de context van eerdere berichten. Verwijswoorden (zoals 'dit', 'dat', 'het') moeten worden opgelost en de kernintentie van de laatste vraag moet duidelijk worden gemaakt.

INSTRUCTIES:
1. Analyseer de chatgeschiedenis en de laatste gebruikersvraag.
2. Identificeer de kernelementen en de intentie van de **laatste gebruikersvraag**.
3. Los eventuele verwijzingen naar eerdere berichten op.
4. Formuleer een nieuwe, **zelfstandige zoekopdracht** die de essentie van de laatste vraag vastlegt. Zorg ervoor dat de core intentie van de gebruikersvraag in orde blijf. 
5. Geef **alleen** de herschreven zoekopdracht terug. Voeg geen uitleg, commentaar, of extra opmaak toe. De output moet direct bruikbaar zijn als zoekterm.

CHAT GESCHIEDENIS:
--- START GESCHIEDENIS ---
{history_section}
--- EINDE GESCHIEDENIS ---

LAATSTE GEBRUIKERSVRAAG:
"{user_query}"

HERSCHREVEN, ZELFSTANDIGE ZOEKOPDRACHT:"""
    return prompt.strip()


# --- Final Answer Generation Prompt ---

def create_prompt(
    user_query: str,
    context: Optional[str] = None,
    chat_history: Optional[str] = None,
    rewritten_query: Optional[str] = None # Optional: For potential inclusion, though usually not needed
    ) -> str:
    """
    Creates the final prompt for the LLM to generate an answer, providing
    the original query, retrieved context, and conversation history.

    Args:
        user_query: The original question asked by the user in the current turn.
        context: A string containing the relevant document chunks retrieved
                 based on the (potentially rewritten) query.
        chat_history: A string representing the recent conversation history
                      (e.g., last 3 turns).
        rewritten_query: The standalone query generated by CQR (mostly for logging/debugging,
                         typically not shown directly to the answer-generation LLM).

    Returns:
        A string containing the formatted prompt for the answer generation task.
    """

    # Prepare context section
    context_section = context.strip() if context and context.strip() else "Er is geen relevante context gevonden in de documentatie voor deze vraag."

    # Prepare history section
    history_section = chat_history.strip() if chat_history and chat_history.strip() else "Er is geen relevante chatgeschiedenis beschikbaar voor deze beurt."

    # Core prompt structure
    prompt = f"""
ROL & DOEL: Je bent een deskundige AI-assistent gespecialiseerd in de technische documentatie van Logius. Jouw taak is om gebruikersvragen nauwkeurig en behulpzaam te beantwoorden, uitsluitend gebaseerd op de verstrekte 'CONTEXT UIT DOCUMENTATIE'. Wees technisch precies, duidelijk en geef concrete voorbeelden waar mogelijk.

INSTRUCTIES VOOR ANTWOORDEN:
1.  **Baseer je antwoord STRIKT op de 'CONTEXT UIT DOCUMENTATIE' hieronder.** Gebruik geen externe kennis of informatie die niet in de context staat.
2.  **Beantwoord de 'OORSPRONKELIJKE GEBRUIKERSVRAAG'.** De context is gevonden op basis van deze vraag (of een interne herschrijving ervan).
3.  **Citeer je bronnen DUIDELIJK.** Vermeld na elk relevant stuk informatie uit welk document (of sectie) het komt. Gebruik een menselijk leesbaar formaat, bijvoorbeeld: "(zie Sectie 3.1 van het Handboek Implementatie Digipoort)" of "(volgens de specificatie voor API-koppelingen v2.1)". De context bevat vaak een pad zoals 'standaard/document/sectie'. Vertaal dit naar een leesbare vorm. **Vermeld NOOIT het letterlijke bestandspad (zoals 'standaard/document/sectie.md') in je antwoord.**
4.  **Als de context de vraag niet volledig beantwoordt,** geef dan aan welke informatie ontbreekt in de verstrekte context. Speculeer niet. Zeg bijvoorbeeld: "De verstrekte documentatie bevat geen details over X."
5.  **Gebruik de 'CHAT GESCHIEDENIS'** om de context van de huidige vraag beter te begrijpen, maar baseer het feitelijke antwoord alleen op de 'CONTEXT UIT DOCUMENTATIE'.
6.  **Formuleer het antwoord in het Nederlands.** Wees professioneel en behulpzaam. Begin het antwoord direct, zonder inleidende zinnen zoals "Hier is het antwoord:" of "Gebaseerd op de context...".
7. **Beantwoord alle vragen duidelijk, technisch en uitgebreid als nodig.** Wees vrij om uitgebreidere antwoorden te geven wanneer dat nodig is. 
8.  **Indien mogelijk, geef altijd een technisch voorbeeld mee.** Bijvoorbeeld API regels etc, geef een voorbeeld van juiste en incorrecte implementatie mee.

---
CHAT GESCHIEDENIS (meest recente beurten):
{history_section}
---
CONTEXT UIT DOCUMENTATIE:
{context_section}
---
OORSPRONKELIJKE GEBRUIKERSVRAAG:
"{user_query}"
---

ANTWOORD (in het Nederlands, gebaseerd op context, met bronvermelding):
"""

    # Optional: Include rewritten query for debugging/transparency if desired
    # Usually commented out for the final generation prompt
    # if rewritten_query and rewritten_query != user_query:
    #     prompt += f"\n\n**(Interne Notitie: De vraag is voor het zoeken herschreven als: \"{rewritten_query}\")**"

    return prompt.strip()


# --- Hypothetical Document Embedding (HyDE) Prompt ---

def HyDE(user_query: str) -> str:
    """
    Creates a prompt for an LLM to generate a hypothetical document
    that answers the user's query. Used for HyDE technique.

    Args:
        user_query: The user's technical question or topic.

    Returns:
        A prompt asking the LLM to generate a detailed hypothetical document.
    """
    prompt = f"""
TAAK: Genereer een **hypothetisch technisch document** dat een uitgebreid antwoord geeft op de volgende vraag of het volgende onderwerp. Dit document zal worden gebruikt om via embedding-gelijkenis daadwerkelijke relevante documenten te vinden (HyDE-techniek).

VRAAG/ONDERWERP: "{user_query}"

STRUCTUUR VAN HET DOCUMENT: Structureer het document logisch, bijvoorbeeld met de volgende secties (pas aan waar nodig):
1.  **Introductie & Probleemstelling:** Geef een kort overzicht van het onderwerp en de vraag die wordt beantwoord.
2.  **Technische Uitleg / Oplossing:** Beschrijf de kernconcepten, architectuur, processen, of de oplossing voor het probleem. Wees gedetailleerd en technisch nauwkeurig.
3.  **Implementatiedetails / Configuratie:** Geef (indien relevant) stappen, codevoorbeelden, of configuratie-instructies.
4.  **Gebruiksscenario's / Voorbeelden:** Illustreer met concrete voorbeelden hoe dit werkt in de praktijk.
5.  **Belangrijke Overwegingen / Best Practices:** Noem eventuele kanttekeningen, veelvoorkomende problemen, of aanbevolen werkwijzen.

STIJL: Schrijf in de stijl van duidelijke, formele, technische documentatie. Wees feitelijk en objectief.

OUTPUT: Geef **alleen** de inhoud van het gegenereerde hypothetische document terug. Voeg geen inleidingen, commentaren of andere tekst buiten het document zelf toe.
"""
    return prompt.strip()

# --- Query Augmentation Prompt ---

def AugmentQuery(user_query: str) -> str:
    """
    Creates a prompt for an LLM to rephrase/augment a user query
    to improve retrieval effectiveness from a technical database.

    Args:
        user_query: The original user query.

    Returns:
        A prompt asking the LLM to generate an improved search query.
    """
    prompt = f"""
TAAK: Herschrijf de volgende technische gebruikersvraag om de kans te maximaliseren dat relevante documenten worden gevonden in een grote technische kennisbank (bijv. API-documentatie, handleidingen, specificaties). Focus op duidelijkheid, precisie en het toevoegen van relevante technische termen of synoniemen.

INSTRUCTIES:
1.  Analyseer de originele vraag en de waarschijnlijke intentie.
2.  Identificeer kernbegrippen en mogelijke ambiguïteiten.
3.  Herschrijf de vraag als een effectieve zoekopdracht. Overweeg:
    *   Synoniemen (bv. "authenticatie" vs "autorisatie" vs "inloggen")
    *   Specifieke technologieën of standaarden (bv. "OAuth 2.0", "SAML", "REST API")
    *   Actiewoorden relevant voor documentatie (bv. "configureren", "specificatie", "foutmelding", "handleiding")
    *   Explicitering van impliciete context (bv. "Digipoort WUS endpoint configuratie" ipv alleen "endpoint configuratie")
4.  Geef **alleen de allerbeste, herschreven zoekopdracht** als resultaat. Geen uitleg, geen alternatieven, geen opmaak, alleen de query zelf.

ORIGINELE GEBRUIKERSVRAAG:
"{user_query}"

GEOPTIMALISEERDE ZOEKOPDRACHT:"""
    return prompt.strip()
